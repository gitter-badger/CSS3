%YAML 1.2
---
name: CSS3
file_extensions: [css, css.erb]
scope: source.css

variables:
  an_plus_b: '[+-]?\d*n(?:\s*[+-]\s*\d+)?'
  angle_unit: turn|grad|rad|deg

  # TODO: delete this?
  # end_selector is imperfect way to differentiate between selector and property
  # fails to differentiate if ';' is not on same line as property name, but
  # should reduce cases of selector-custom-element matching property names.
  # end_selector: '(?=[^;]*[\n{])'

  arithmetic_operator: '[-+*/]'
  escape: '\\(?:[^\n\r\f\h]|\h{1,6}{{whitespace}}?)'
  exponent: '[eE][+-]?\d+'
  frequency_unit: k?Hz
  ident_char: '[-a-zA-Z\d_\\\p{^ASCII}]'
  ident_start: '-?[a-zA-Z_\\\p{^ASCII}]'
  identifier: '{{ident_start}}{{ident_char}}*'
  integer: '[+-]?\d+'
  integer_non_neg: \+?\d+
  integer_pos: '\+?(?:[1-9]\d+|[1-9])'
  integer_zero_to_255: '\b(?:2[0-5][0-5]|1\d\d|[1-9]\d|\d)\b'
  length_unit: r?em|ex|ch|vw|vh|vmin|vmax|cm|mm|q|in|pc|pt|px
  optional_min_max_prefix: '\b(?:min-|max-)?'
  not_followed_by_dash: '(?!-)'
  number: '[+-]?(?:\d+\.\d+|\.\d+|\d+)(?:{{exponent}})?'
  number_non_neg: '\+?(?:\d+\.\d+|\.\d+|\d+)(?:{{exponent}})?'
  number_pos: '\+?(?:\d+\.\d*[1-9]\d*|\.\d*[1-9]\d*|[1-9]\d*)(?:{{exponent}})?'
  percentage_unit: '%'
  ratio: '({{integer_pos}})\s*\/\s*({{integer_pos}})'
  resolution_unit: dppx|dpi|dpcm
  time_unit: m?s
  # '' is how you escape a single ' in YAML
  url_char: '[a-zA-Z0-9\-\._~:/\?#\[\]''@!$&()\*\+\%,;=]'
  whitespace: '[ \t\n]'
  zero: \b0\b
  zero_to_one: \b0(?:\.\d+)?|1(?:\.0+)?|\.\d+
  zero_to_hundred: '\b(?:100|[1-9]\d|\d)(?:\.\d+)?|\.\d+'

contexts:
  main:
    - include: at-media
    # - include: property-list
    # - include: string-double
    # - include: string-single

  angle:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{angle_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  arithmetic-operator:
    - match: '{{arithmetic_operator}}'
      scope: keyword.operator.arithmetic.css

  # Media queries start with "@media" and end with a closing curly brace. To
  # match this text, we define an outer scope that starts with "@media" and
  # continues until just past the "}". The text between the curlies is then
  # matched as a nested scope, i.e. the opening curly pushes a new scope on the
  # stack, which is popped at the closing curly. This lets us match the media
  # features before the opening curly and the text between the curlies in one
  # rule.
  #
  # |-------------------outer scope-----------------------------------|
  #        |---media-features-etc----||--------nested scope-----------|
  # @media stuff-before-opening-curly { selector { property: value; } }
  at-media:
    - match: (@)media\b
      captures:
        0: keyword.control.at-rule.media.css
        1: punctuation.definition.keyword.css
      push:
      - match: '{'
        scope: punctuation.section.media-query.begin.css
        push:
          - include: at-media
          - include: rule
          # only match closing curly after nested scopes have had a chance to
          # match
          - match: '}'
            scope: punctuation.section.media-query.end.css
            pop: true
      - match: \band\b
        scope: keyword.operator.logic.media.css
      - include: media-feature
      - include: media-type
      - match: '(?<=})'
        pop: true

  comment:
    - match: /\*
      push:
        - meta_scope: comment.block.css
        - match: \*/
          pop: true

  end-func:
    - match: \)
      scope: punctuation.section.function.end.css
      pop: true

  end-media-feature:
    - match: '(?=\))'
      pop: true

  end-value:
    - match: ';|(?=\})'
      scope: punctuation.terminator.rule.css
      pop: true

  escape:
    - match: '{{escape}}'
      scope: constant.character.escape.css

  frequency:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{frequency_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  func-calc:
    - match: \b(calc)(\()
      captures:
        1: support.function.calc.css
        2: punctuation.section.function.begin.css
      push:
        - include: end-func
        - include: length
        - include: frequency
        - include: angle
        - include: time
        - include: percentage
        - include: number
        - include: arithmetic-operator

  integer:
    - include: func-calc
    - match: '{{integer}}'
      scope: constant.numeric.css

  integer-non-negative:
    - include: func-calc
    - match: '{{integer_non_neg}}'
      scope: constant.numeric.css

  length:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{length_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  length-non-negative:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number_non_neg}})({{length_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  media-feature:
    - match: \(
      scope: punctuation.section.media-feature.begin.css
      push:
        # Note that this is different from media-feature-end, which matches
        # just before the closing paren.
        - match: \)
          scope: punctuation.section.media-feature.end.css
          pop: true
        - include: media-feature-custom
        - include: media-feature-aspect-ratio
        - include: media-feature-color-gamut
        - include: media-feature-grid
        - include: media-feature-hover
        - include: media-feature-inverted-colors
        - include: media-feature-monochrome-color-index
        - include: media-feature-width-height
        - include: media-feature-light-level
        - include: media-feature-orientation
        - include: media-feature-overflow-block
        - include: media-feature-overflow-inline
        - include: media-feature-pointer
        - include: media-feature-resolution
        - include: media-feature-scan
        - include: media-feature-scripting
        - include: media-feature-update
        - include: media-feature-range-operator
        # match values and comparison operators that appear before a range
        #  |------|
        # (480px <= width <= 640px)
        - include: ratio
        - include: resolution
        - include: length-non-negative
        - include: integer-non-negative
    - match: \)
      scope: invalid.illegal.stray-paren.css

  # e.g. (aspect-ratio: 16/9)
  media-feature-aspect-ratio:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          (?:device-)?
          aspect-ratio
        )\s*(:)'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: '{{ratio}}'
          captures:
            1: constant.numeric.css
            2: constant.numeric.css
        - include: media-feature-range-operator

  media-feature-custom:
    - match: '\-\-{{identifier}}'
      scope: support.constant.property-name.custom.css

  media-feature-color-gamut:
    - match: \b(color-gamut)\s*(:)
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:srgb|rec2020|p3)\b
          scope: support.constant.property-value.css

  media-feature-grid:
    - match: \b(grid)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:0|1)\b
          scope: support.constant.property-value.css

  media-feature-hover:
    - match: \b((?:any-)?hover)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:on-demand|none|hover)\b
          scope: support.constant.property-value.css

  media-feature-inverted-colors:
    - match: \b(inverted-colors)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|inverted)\b
          scope: support.constant.property-value.css

  media-feature-light-level:
    - match: '\b(light-level)\s*(:)'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: washed|normal|dim
          scope: support.constant.property-value.css

  media-feature-monochrome-color-index:
    # {{not_followed_by_dash}} prevents "color" from matching misspelled
    # "color-index" or "color-gamut"
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          (?:monochrome|color-index|color)
        )\s*(:)?
        {{not_followed_by_dash}}'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: integer-non-negative
        - include: media-feature-range-operator

  media-feature-orientation:
    - match: \b(orientation)\s*(:)
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:portrait|landscape)\b
          scope: support.constant.property-value.css

  media-feature-overflow-block:
    - match: \b(overflow-block)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:scroll|paged|optional-paged|none)\b
          scope: support.constant.property-value.css

  media-feature-overflow-inline:
    - match: \b(overflow-inline)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:scroll|none)\b
          scope: support.constant.property-value.css

  media-feature-pointer:
    - match: \b((?:any-)?pointer)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|fine|coarse)\b
          scope: support.constant.property-value.css

  media-feature-range-operator:
    - match: '(?<=[\s\w])(?:[<>]=?|=)(?=[\s\w])'
      scope: keyword.operator.arithmetic.css

  # e.g. (min-resolution: 300dpi)
  media-feature-resolution:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          resolution
        )\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: resolution
        - include: media-feature-range-operator

  media-feature-scan:
    - match: '\b(scan)\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: '\b(?:progressive|interlace)\b'
          scope: support.constant.property-value.css

  media-feature-scripting:
    - match: '\b(scripting)\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|initial-only|enabled)\b
          scope: support.constant.property-value.css

  media-feature-update:
    - match: \b(update)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:normal|none|slow)\b
          scope: support.constant.property-value.css

  # may appear as "(width: 480px)" or "(width >= 480px)"
  media-feature-width-height:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          (?:
            width|
            height|
            device-width|
            device-height
          )
        )\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: length-non-negative
        - include: media-feature-range-operator

  media-type:
    - include: media-type-deprecated
    - match: (?:(only|not)\s+)?(speech|screen|print|all)
      captures:
        1: keyword.operator.logic.media.css
        2: support.constant.media.css

  media-type-deprecated:
    - match: \b(?:tv|tty|reader|projection|handheld|embossed|braille|aural)\b
      scope: support.constant.media.css invalid.deprecated.css

  number:
    - include: func-calc
    - match: '{{number}}'
      scope: constant.numeric.css

  percentage:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{percentage_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  # property-list matches a block of property-value pairs.
  # {
  #     property: value;
  # }
  property-list:
    - match: '{'
      scope: punctuation.section.property-list.begin.css
      push:
        # - meta_scope: invalid.deprecated.css # DEBUG
        - match: '}'
          scope: punctuation.section.property-list.end.css
          pop: true
        # TODO: add rules for matching property/value pairs here

  prototype:
    - include: comment

  resolution:
    - match: '({{integer_pos}})({{resolution_unit}})'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css

  # a rule is a selector and a property list.
  # selector {
  #     property: value;
  # }
  rule:
    - match: '(?=[\w.#-])'
      push:
        - include: property-list
        - match: '(?<=})'
          pop: true
        # TODO: add rules matching selectors here

  string-double:
    - match: '"'
      scope: punctuation.definition.string.begin.css
      push:
        # /* inside string should not match as comment
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.css
        - match: '"'
          scope: punctuation.definition.string.end.css
          pop: true
        - include: escape

  string-single:
    - meta_include_prototype: false
    - match: "'"
      scope: punctuation.definition.string.begin.css
      push:
        # /* inside string should not match as comment
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.css
        - match: "'"
          scope: punctuation.definition.string.end.css
          pop: true
        - include: escape

  time:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{time_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css
