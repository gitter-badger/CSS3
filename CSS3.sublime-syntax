%YAML 1.2
---
name: CSS3
file_extensions: [css, css.erb]
scope: source.css

variables:
  an_plus_b: '(?<!\w)[+-]?\d*n(?:\s*[+-]\s*\d+)?'
  angle_unit: turn|grad|rad|deg
  arithmetic_operator: '[-+*/]'
  attr_matcher: '[~^$*|]?='
  column: '\|\|'
  combinator: '(?:{{column}}|>{1,3}|[+~])'
  escape: '\\(?:[^\n\r\f\h]|\h{1,6}{{whitespace}}?)'
  exponent: '[eE][+-]?\d+'
  frequency_unit: k?Hz
  ident_char: '[-a-zA-Z\d_\\\p{^ASCII}]'
  ident_start: '-?[a-zA-Z_\\\p{^ASCII}]'
  identifier: '{{ident_start}}{{ident_char}}*'
  integer: '[+-]?\d+'
  integer_non_neg: \+?\d+
  integer_pos: '\+?(?:[1-9]\d+|[1-9])'
  integer_zero_to_255: '\b(?:2[0-5][0-5]|1\d\d|[1-9]\d|\d)\b'
  length_unit: r?em|ex|ch|vw|vh|vmin|vmax|cm|mm|q|in|pc|pt|px
  not_followed_by_dash: '(?!-)'
  ns_prefix: '(?:{{identifier}}|(\*))?(\|)'
  number: '[+-]?(?:\d+\.\d+|\.\d+|\d+)(?:{{exponent}})?'
  number_non_neg: '\+?(?:\d+\.\d+|\.\d+|\d+)(?:{{exponent}})?'
  number_pos: '\+?(?:\d+\.\d*[1-9]\d*|\.\d*[1-9]\d*|[1-9]\d*)(?:{{exponent}})?'
  optional_min_max_prefix: '\b(?:min-|max-)?'
  optional_vendor_prefix: '(?:-webkit-|-ms-|-moz-)?'
  percentage_unit: '%'
  ratio: '({{integer_pos}})\s*(\/)\s*({{integer_pos}})'
  resolution_unit: dppx|dpi|dpcm
  time_unit: m?s
  # '' is how you escape a single ' in YAML
  url_char: '[a-zA-Z0-9\-\._~:/\?#\[\]''@!$&()\*\+\%,;=]'
  whitespace: '[ \t\n]'
  wq_name: '({{ns_prefix}})?({{identifier}}|(\*))'
  zero: \b0\b
  zero_to_one: \b0(?:\.\d+)?|1(?:\.0+)?|\.\d+
  zero_to_hundred: '\b(?:100|[1-9]\d|\d)(?:\.\d+)?|\.\d+'

contexts:
  main:
    - include: at-media
    - include: rule

  angle:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{angle_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  an_plus_b:
    - match: 'odd|even|{{an_plus_b}}'
      scope: constant.other.an-plus-b.css

  arithmetic-operator:
    - match: '{{arithmetic_operator}}'
      scope: keyword.operator.arithmetic.css

  # Media queries start with "@media" and end with a closing curly brace. To
  # match this text, we define an outer scope that starts with "@media" and
  # continues until just past the "}". The text between the curlies is then
  # matched as a nested scope, i.e. the opening curly pushes a new scope on the
  # stack, which is popped at the closing curly. This lets us match the media
  # features before the opening curly and the text between the curlies in one
  # rule.
  #
  # |-------------------outer scope-----------------------------------|
  #        |---media-features-etc----||--------nested scope-----------|
  # @media stuff-before-opening-curly { selector { property: value; } }
  at-media:
    - match: (@)media\b
      captures:
        0: keyword.control.at-rule.media.css
        1: punctuation.definition.keyword.css
      push:
      - match: '{'
        scope: punctuation.section.media-query.begin.css
        push:
          - include: at-media
          - include: rule
          # only match closing curly after nested scopes have had a chance to
          # match
          - match: '}'
            scope: punctuation.section.media-query.end.css
            pop: true
      - match: \band\b
        scope: keyword.operator.logic.media.css
      - include: media-feature
      - include: media-type
      - match: '(?<=})'
        pop: true

  comment:
    - match: /\*
      push:
        - meta_scope: comment.block.css
        - match: \*/
          pop: true

  end-func:
    - match: \)
      scope: punctuation.section.function.end.css
      pop: true

  end-media-feature:
    - match: '(?=\))'
      pop: true

  end-value:
    - match: ';|(?=\})'
      scope: punctuation.terminator.rule.css
      pop: true

  escape:
    - match: '{{escape}}'
      scope: constant.character.escape.css

  frequency:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{frequency_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  func-calc:
    - match: \b(calc)(\()
      captures:
        1: support.function.calc.css
        2: punctuation.section.function.begin.css
      push:
        - include: end-func
        - include: length
        - include: frequency
        - include: angle
        - include: time
        - include: percentage
        - include: number
        - include: arithmetic-operator

  integer:
    - include: func-calc
    - match: '{{integer}}'
      scope: constant.numeric.css

  integer-non-negative:
    - include: func-calc
    - match: '{{integer_non_neg}}'
      scope: constant.numeric.css

  length:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{length_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  length-non-negative:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number_non_neg}})({{length_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  media-feature:
    - match: \(
      scope: punctuation.section.media-feature.begin.css
      push:
        # Note that this is different from media-feature-end, which matches
        # just before the closing paren.
        - match: \)
          scope: punctuation.section.media-feature.end.css
          pop: true
        - include: media-feature-deprecated
        - include: media-feature-custom
        - include: media-feature-aspect-ratio
        - include: media-feature-color-gamut
        - include: media-feature-grid
        - include: media-feature-hover
        - include: media-feature-inverted-colors
        - include: media-feature-monochrome-color-index
        - include: media-feature-width-height
        - include: media-feature-light-level
        - include: media-feature-orientation
        - include: media-feature-overflow-block
        - include: media-feature-overflow-inline
        - include: media-feature-pointer
        - include: media-feature-resolution
        - include: media-feature-scan
        - include: media-feature-scripting
        - include: media-feature-update
        - include: media-feature-range-operator
        # match values and comparison operators that appear before a range
        #  |------|
        # (480px <= width <= 640px)
        - include: ratio
        - include: resolution
        - include: length-non-negative
        - include: integer-non-negative
    - include: stray-paren

  # e.g. (aspect-ratio: 16/9)
  media-feature-aspect-ratio:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          aspect-ratio
        )\s*(:)'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: ratio
        - include: media-feature-range-operator

  media-feature-color-gamut:
    - match: \b(color-gamut)\s*(:)
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:srgb|rec2020|p3)\b
          scope: support.constant.property-value.css

  media-feature-custom:
    - match: '\-\-{{identifier}}'
      scope: support.constant.property-name.custom.css

  media-feature-deprecated:
    - match: '\b({{optional_min_max_prefix}}device\-(?:width|height|aspect-ratio))\s*(:)?'
      captures:
        1: support.constant.property-name.css invalid.deprecated.css
        2: punctuation.separator.key-value.css

  media-feature-grid:
    - match: \b(grid)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:0|1)\b
          scope: support.constant.property-value.css

  media-feature-hover:
    - match: \b((?:any-)?hover)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:on-demand|none|hover)\b
          scope: support.constant.property-value.css

  media-feature-inverted-colors:
    - match: \b(inverted-colors)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|inverted)\b
          scope: support.constant.property-value.css

  media-feature-light-level:
    - match: '\b(light-level)\s*(:)'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: washed|normal|dim
          scope: support.constant.property-value.css

  media-feature-monochrome-color-index:
    # {{not_followed_by_dash}} prevents "color" from matching misspelled
    # "color-index" or "color-gamut"
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          (?:monochrome|color-index|color)
        )\s*(:)?
        {{not_followed_by_dash}}'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: integer-non-negative
        - include: media-feature-range-operator

  media-feature-orientation:
    - match: \b(orientation)\s*(:)
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:portrait|landscape)\b
          scope: support.constant.property-value.css

  media-feature-overflow-block:
    - match: \b(overflow-block)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:scroll|paged|optional-paged|none)\b
          scope: support.constant.property-value.css

  media-feature-overflow-inline:
    - match: \b(overflow-inline)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:scroll|none)\b
          scope: support.constant.property-value.css

  media-feature-pointer:
    - match: \b((?:any-)?pointer)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|fine|coarse)\b
          scope: support.constant.property-value.css

  media-feature-range-operator:
    - match: '(?<=[\s\w])(?:[<>]=?|=)(?=[\s\w])'
      scope: keyword.operator.arithmetic.css

  # e.g. (min-resolution: 300dpi)
  media-feature-resolution:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          resolution
        )\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: resolution
        - include: media-feature-range-operator

  media-feature-scan:
    - match: '\b(scan)\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: '\b(?:progressive|interlace)\b'
          scope: support.constant.property-value.css

  media-feature-scripting:
    - match: '\b(scripting)\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:none|initial-only|enabled)\b
          scope: support.constant.property-value.css

  media-feature-update:
    - match: \b(update)\s*(:)?
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - match: \b(?:normal|none|slow)\b
          scope: support.constant.property-value.css

  # may appear as "(width: 480px)" or "(width >= 480px)"
  media-feature-width-height:
    - match: '(?x)
        (
          {{optional_min_max_prefix}}
          (?:width|height)
        )\s*(:)?'
      captures:
        1: support.constant.property-name.css
        2: punctuation.separator.key-value.css
      push:
        - include: end-media-feature
        - include: length-non-negative
        - include: media-feature-range-operator

  media-type:
    - include: media-type-deprecated
    - match: (?:(only|not)\s+)?(speech|screen|print|all)
      captures:
        1: keyword.operator.logic.media.css
        2: support.constant.media.css

  media-type-deprecated:
    - match: \b(?:tv|tty|reader|projection|handheld|embossed|braille|aural)\b
      scope: support.constant.media.css invalid.deprecated.css

  number:
    - include: func-calc
    - match: '{{number}}'
      scope: constant.numeric.css

  percentage:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{percentage_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css

  # property-list matches a block of property-value pairs.
  # {
  #     property1: value1;
  #     property2: value2;
  # }
  property-list:
    - match: '{'
      scope: punctuation.section.property-list.begin.css
      push:
        # - meta_scope: invalid.deprecated.css # DEBUG
        - match: '}'
          scope: punctuation.section.property-list.end.css
          pop: true
        # TODO: add rules for matching property/value pairs here

  prototype:
    - include: comment

  ratio:
    - match: '{{ratio}}'
      captures:
        1: constant.numeric.css
        2: keyword.operator.arithmetic.css
        3: constant.numeric.css

  resolution:
    - match: '({{integer_pos}})({{resolution_unit}})'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css

  # A rule is a selector and a property list.
  # selector {
  #     property1: value1;
  #     property2: value2;
  # }
  rule:
    - match: '(?=[\w.:#-\[*])'
      push:
        - match: '(?<=})'
          pop: true
        - include: property-list
        - include: selector

  selector:
    - include: selector-simple-compound
    - include: selector-combinator

  selector-attribute:
    - match: '\['
      scope: punctuation.section.attribute.css
      push:
        - match: '\]'
          scope: punctuation.section.attribute.css
          pop: true
        - include: string
        - match: '{{attr_matcher}}'
          scope: keyword.operator.attribute.css
        - match: \bi\b
          scope: support.constant.attr-modifier.css
        - match: '(?<=\[)\s*{{wq_name}}\s*(?=[~^$*=|\]])'
          scope: string.unquoted.attribute-value.css

  selector-class:
    - match: '(\.){{identifier}}'
      captures:
        0: entity.other.attribute-name.class.css
        1: punctuation.definition.entity.css

  selector-combinator:
    - match: '{{combinator}}(?![>+~|])'
      scope: keyword.operator.combinator.css
    - match: '{{combinator}}{2,}'
      scope: keyword.operator.combinator.css invalid.illegal.combinator.css

  selector-id:
    - match: '(#){{identifier}}'
      captures:
        0: entity.other.attribute-name.id.css
        1: punctuation.definition.entity.css

  selector-pseudo-class:
    # Match pseudo-class functions first to avoid collisions between
    # pseudo-classes like :drop and :drop().
    - include: selector-pseudo-class-func
    - include: selector-pseudo-class-deprecated
    - match: '(?x)
      (:)
      {{optional_vendor_prefix}}
      (?:
        visited|
        valid|
        user-invalid|
        target|
        scope|
        root|
        required|
        read-write|
        read-only|
        playing|
        placeholder-shown|
        paused|
        past|
        out-of-range|
        optional|
        only-of-type|
        only-child|
        link|
        last-of-type|
        last-child|
        invalid|
        indeterminate|
        in-range|
        hover|
        host|
        future|
        focus-within|
        focus|
        first-of-type|
        first-child|
        enabled|
        empty|
        drop|
        disabled|
        default|
        current|
        checked|
        blank|
        any-link|
        active
      )\b'
      captures:
        0: entity.other.attribute-name.pseudo-class.css
        1: punctuation.definition.entity.css
    - include: selector-pseudo-class-invalid

  selector-pseudo-class-deprecated:
    - match: '(?x)
        (:)
        {{optional_vendor_prefix}}
        (?:
          first-line|
          first-letter|
          bound-element|
          before|
          after
        )\b'
      captures:
        0: entity.other.attribute-name.pseudo-class.css invalid.deprecated.css
        1: punctuation.definition.entity.css

  selector-pseudo-class-func:
    - include: selector-pseudo-class-dir
    - include: selector-pseudo-class-drop
    - include: selector-pseudo-class-host
    - include: selector-pseudo-class-lang
    - include: selector-pseudo-class-not-matches-has
    - include: selector-pseudo-class-nth-child
    - include: selector-pseudo-class-nth-column-nth-type
    - include: selector-pseudo-class-scope-context

  selector-pseudo-class-dir:
    - match: ((:)dir)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.dir.css
        - include: end-func
        - match: \b(?:rtl|ltr)\b
          scope: support.constant.property-value.css
    - include: stray-paren

  selector-pseudo-class-drop:
    - match: ((:)drop)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.drop.css
        - include: end-func
        - match: \b(?:valid|invalid|active)\b
          scope: support.constant.property-value.css
    - include: stray-paren

  selector-pseudo-class-host:
    - match: ((:)host(?:-context)?)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.host.css
        - include: end-func
        - include: selector-simple-compound
    - include: stray-paren

  # Match selector text that starts with ":" but isn't on the list of valid
  # pseudo-classes. This prevents the text from being mistakenly matched by
  # another rule, like the type selector.
  selector-pseudo-class-invalid:
    - match: '(:)[\w-]+'
      captures:
        # Don't apply a scope to the whole match so it won't be highlighted.
        1: punctuation.definition.entity.css

  selector-pseudo-class-lang:
    - match: ((:)lang)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.lang.css
        - include: end-func
        - match: '[*a-zA-Z0-9-]+'
          scope: support.constant.property.value.css
    - include: stray-paren

  selector-pseudo-class-not-matches-has:
    - match: '((:)(?:not|matches|has))(\()'
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.not-matches-has.css
        - include: end-func
        - include: selector
    - include: stray-paren

  selector-pseudo-class-nth-child:
    - match: '((:)(?:nth-last-child|nth-child))(\()'
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.nth-child.css
        - include: end-func
        - match: \bof\b
          scope: support.constant.property-value.css
        - include: an_plus_b
        - include: selector
    - include: stray-paren

  selector-pseudo-class-nth-column-nth-type:
    - match: '(?x)
      (
        (:)
        (?:
          nth-of-type|
          nth-last-of-type|
          nth-last-column|
          nth-column
        )
      )
      (\()'
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.nth.css
        - include: end-func
        - include: an_plus_b
    - include: stray-paren

  selector-pseudo-class-scope-context:
    - match: ((:)scope-context)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-class.scope-context.css
        - include: end-func
        - include: selector
    - include: stray-paren

  selector-pseudo-element:
    - match: '(?x)
        (::)
        {{optional_vendor_prefix}}
        (?:
          spelling-error|
          shadow|
          selection|
          region|
          placeholder|
          marker|
          inactive-selection|
          grammar-error|
          first-line|
          first-letter|
          content|
          before|
          after
        )\b'
      captures:
        0: entity.other.attribute-name.pseudo-element.css
        1: punctuation.definition.entity.css
    - include: selector-pseudo-element-slotted
    - include: selector-pseudo-element-invalid

  # Match selector text that starts with "::" but isn't on the list of valid
  # pseudo-elements. This prevents the text from being mistakenly matched by
  # another rule, like the type selector.
  selector-pseudo-element-invalid:
    - match: '(::)[\w-]+'
      captures:
        # Don't apply a scope to the whole match so it won't be highlighted.
        1: punctuation.definition.entity.css

  selector-pseudo-element-slotted:
    - match: '((::)slotted)(\()'
      captures:
        1: entity.other.attribute-name.pseudo-element.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.css
      push:
        - meta_content_scope: meta.pseudo-element.slotted.css
        - include: end-func
        - include: selector-simple-compound
    - include: stray-paren

  # This matches simple selectors and compound selectors, which are just one
  # or more simple selectors.
  selector-simple-compound:
    - include: selector-pseudo-element
    - include: selector-pseudo-class
    - include: selector-id
    - include: selector-class
    - include: selector-attribute
    # Match selector-type last because this includes custom elements, which
    # match nonspecific identifiers.
    - include: selector-type

  selector-type:
    - include: selector-type-deprecated
    - match: '(?x)
        (?:
          {{wq_name}}|
          {{ns_prefix}}(\*)
        )'
      captures:
        1: string.unquoted.namespace.css
        2: string.unquoted.namespace.wildcard.css
        3: punctuation.separator.namespace.css
        4: entity.name.tag.css
        5: entity.name.tag.wildcard.css

  selector-type-deprecated:
    - match: '(?x)
        (?<![-:\[])
        \b(?:
          xmp|
          tt|
          strike|
          spacer|
          plaintext|
          noframes|
          noembed|
          nobr|
          nextid|
          multicol|
          marquee|
          listing|
          isindex|
          hgroup|
          frameset|
          frame|
          font|
          dir|
          center|
          blink|
          big|
          bgsound|
          basefont|
          applet|
          acronym
        )\b
      (?!-)'
      scope: entity.name.tag.css invalid.deprecated.css

  stray-paren:
    - match: \)
      scope: invalid.illegal.stray-paren.css

  string:
    - include: string-double
    - include: string-single

  string-double:
    - match: '"'
      scope: punctuation.definition.string.begin.css
      push:
        # /* inside string should not match as comment
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.css
        - match: '"'
          scope: punctuation.definition.string.end.css
          pop: true
        - include: escape

  string-single:
    - meta_include_prototype: false
    - match: "'"
      scope: punctuation.definition.string.begin.css
      push:
        # /* inside string should not match as comment
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.css
        - match: "'"
          scope: punctuation.definition.string.end.css
          pop: true
        - include: escape

  time:
    - include: func-calc
    - match: '(?x)
        (?:
          ({{number}})({{time_unit}})\b|
          ({{zero}})
        )'
      captures:
        1: constant.numeric.css
        2: keyword.other.unit.css
        3: constant.numeric.css
